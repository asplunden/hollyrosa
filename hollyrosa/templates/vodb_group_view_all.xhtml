<html py:extends="master.xhtml" py:strip="True">

<!--
Copyright 2010-2017 Martin Eliasson

This file is part of Hollyrosa

Hollyrosa is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Hollyrosa is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Hollyrosa.  If not, see <http://www.gnu.org/licenses/>.

-->

<head py:block="head" py:strip="True">
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" py:replace="''"/>
  <title>Hollyrosa - Viewing VODB Groups</title>
  <!-- TODO: is std.js used here ? -->
  <script type="text/javascript" src="${tg.url('/scripts/std.js')}" ></script>


  <script>

  require(["common_menu", "tags", "dojo/_base/array", "dijit/registry","dijit/Menu","dijit/MenuItem","dijit/PopupMenuItem", "dojo/query!css2", "dojo/io-query", "dojo/dom", "dojo/dom-construct", "dojo/request/xhr", "dojo/on", "dojo/_base/window", "dojo/ready", "dojo/domReady!"], function(common_menu, tags, array, registry, Menu, MenuItem, PopupMenuItem, xq, ioQuery, dom, domConstruct, xhr, on, win, ready) {

  // TODO: again we need to mov tag stuff to its own module

  function deleteTagHelper(evt) {
    var tag_elem = evt.target.parentElement;
    var inner_text = tag_elem.textContent;
    inner_text = inner_text.replace(' (X)','');
    var visiting_group_id = tag_elem.attributes['hollyrosa:vgid'].value;
    tags.deleteTag("${tg.url('/tag/delete_tag')}", visiting_group_id, tag_elem.parentElement.id, inner_text);
  }

  var tag_dialog = tags.createAddTagDialog( '${tg.url('/tag/add_tags')}', tags.updateTagsCloseDialog );

  function show_add_tag_dialog(node_id) {
    var visiting_group_id = node_id.attributes['hollyrosa:vgid'].value;
    tags.showAddTagDialog(tag_dialog, visiting_group_id, node_id.attributes['hollyrosa:taglist_node_id'].value);
  }

  // TODO: need to move note stuff to its own module
  function updateNotes(data) {
    var vgroup_id = data['id'];
    var load_note_link = dom.byId('load_notes_for_' + vgroup_id);
    domConstruct.destroy(load_note_link);

    var notes = data['notes'];
    for (n in notes) {
      note = notes[n];
      var notes_for_id = 'notes_for_' + note['target_id'];

      e = dom.byId(notes_for_id);
      var note_div = domConstruct.create("div", {innerHTML: note['text'], class:note['type']+'2'}, e);
      if (note['type'] == 'attachment') {
        var note_div2 = domConstruct.create("div", {}, note_div);

        var attachments = note['_attachments'];
        var keys = Object.keys(attachments);
        array.forEach(keys, function(key) {
          var ioq = {
            attachment_id: note._id,
            doc_id: key
          };

          var ul = domConstruct.create("ul", {}, note_div2);
          var li = domConstruct.create("li", {}, ul);

          domConstruct.create("a", {href:'${tg.url('/note/download_attachment')}' + '?' + ioQuery.objectToQuery(ioq), innerHTML: key}, li);

        });
      }
    }
  }


  function loadNotesFor(id) {
    xhr("${tg.url('/note/get_notes_for_visiting_group')}", {
      query: {id: id},
      handleAs: 'json',
      method: "GET"}).then( updateNotes );
    }


    var menu = new Menu({
      targetNodeIds: ["vgroup_listing"],
      selector: "tr.name_menu",
      leftClickToOpen: common_menu.load_left_click_menu(),
      onOpen: function(evt) {
        var node = menu.currentTarget;
        var has_notes = node.attributes["hollyrosa:has_notes"].value;

        // TODO: refactor - what is logical operator NOT in JS ??
        if (has_notes == 'True') {
          load_notes_menu_item.disabled = false;
        } else {
          load_notes_menu_item.disabled = true;
        }
      } // end function
    });

    // refactor later
    // not in VODB view common_menu.add_visiting_group_menu_item(menu, menu, "New booking request...", '${tg.url('/booking/edit_booking')}');
    common_menu.add_menu_separator(menu);
    common_menu.add_visiting_group_menu_item(menu, menu, "View vodb data...", '${tg.url('view_vodb_group')}');
    common_menu.add_visiting_group_menu_item(menu, menu, "Edit vodb data...", '${tg.url('edit_group_data')}');
    common_menu.add_visiting_group_menu_item(menu, menu, "Edit vodb sheet...", '${tg.url('edit_group_sheet')}');
    //common_menu.add_visiting_group_list_bookings_menu_item(menu, menu, "List program bookings of group o...", '${tg.url('view_bookings_of_name')}');
    common_menu.add_visiting_group_menu_item(menu, menu, "List bookings of group...", '${tg.url('/visiting_group/view_bookings_of_visiting_group_id')}');
    common_menu.add_menu_separator(menu);
    common_menu.add_call_function_menu_item(menu, menu, "Add tags...",  show_add_tag_dialog  );
    common_menu.add_visiting_group_add_note_menu_item(menu, menu, "Add note...", '${tg.url('/note/add_note')}');
    common_menu.add_visiting_group_add_note_menu_item(menu, menu, "Add attachment...", '${tg.url('/note/add_attachment')}');

    var load_notes_menu_item = new MenuItem({
      label: "Load notes",
      onClick: function(evt) {
        var node = this.getParent().currentTarget;
        var vgroup_id = node.attributes["hollyrosa:vgid"].value;
        loadNotesFor(vgroup_id);

        //...this isn't bulletproof, should be in a callback after the notes have loaded.
        var node = menu.currentTarget;
        node.attributes["hollyrosa:has_notes"].value = "False";
      }
    });

    menu.addChild(load_notes_menu_item);

    common_menu.add_menu_separator(menu);
    common_menu.add_visiting_group_menu_item(menu, menu, "Show history...", '${tg.url('/history/show')}');


    /* assembling the filter booking status menu */
    var filter_menu = new Menu({
      targetNodeIds: ["bokn_status_menu"],
      leftClickToOpen: common_menu.load_left_click_menu()
    });

    common_menu.add_redirect_menu_item(filter_menu, filter_menu, "All vodb groups", '', '${tg.url('/vodb_group/view_all')}');
    common_menu.add_redirect_menu_item(filter_menu, filter_menu, "All vodb groups today", '', '${tg.url('/vodb_group/view_today')}');

    common_menu.add_menu_separator(filter_menu);

    common_menu.add_redirect_menu_item(filter_menu, filter_menu, "New Visiting Group", '', '${tg.url('/vodb_group/edit_group_data', params={'subtype':'program'})}');
    common_menu.add_redirect_menu_item(filter_menu, filter_menu, "New Staff Member", '', '${tg.url('/vodb_group/edit_group_data', params={'subtype':'staff'})}');
    common_menu.add_redirect_menu_item(filter_menu, filter_menu, "New Course", '', '${tg.url('/vodb_group/edit_group_data', params={'subtype':'course'})}');

    common_menu.add_menu_separator(filter_menu);

    var vodb_state_menu = new Menu();
    filter_menu.addChild(new PopupMenuItem({
      label: "Select VODB status...",
      popup: vodb_state_menu,
      leftClickToOpen: common_menu.load_left_click_menu()
    }));

    var tag_menu = new Menu();
    filter_menu.addChild(new PopupMenuItem({
      label: "Select Tags...",
      popup: tag_menu,
      leftClickToOpen: common_menu.load_left_click_menu()
    }));


    var group_type_menu = new Menu();
    filter_menu.addChild(new PopupMenuItem({
      label: "Select Group type...",
      popup: group_type_menu,
      leftClickToOpen: common_menu.load_left_click_menu()
    }));

    var date_range_menu = new Menu();
    filter_menu.addChild(new PopupMenuItem({
      label: "Select Date range...",
      popup: date_range_menu,
      leftClickToOpen: common_menu.load_left_click_menu()
    }));

    common_menu.add_menu_separator(filter_menu);

    var view_vgt_menu = new Menu();
    filter_menu.addChild(new PopupMenuItem({
      label: "Filter on Group Type...",
      popup: view_vgt_menu,
      leftClickToOpen: common_menu.load_left_click_menu()
    }));

    var l2 = ${literal(state_map_list)};
    var l3 = [['program','program'],['staff','staff'],['course','course']];


    array.forEach(l3, function(l) {
      common_menu.add_redirect_menu_item(filter_menu, group_type_menu, l[1], {'group_type':l[0]}, '${tg.url('view_group_type')}');
    });

    array.forEach(l2, function(l) {
      common_menu.add_redirect_menu_item(filter_menu, vodb_state_menu, l[1], {'vodb_state':l[0]}, '${tg.url('view_vodb_state')}');
    });



    var all_tags = ${literal(all_tags)};
    array.forEach(all_tags, function(l) {
      common_menu.add_redirect_menu_item(filter_menu, tag_menu, l, {tag:l}, '${tg.url('view_tags')}');
    });
    /* assembling the filter tag menu */



    on(win.doc, '.tag:click', deleteTagHelper);

    ready(function() {
      var tag_ul_elems = xq('.tag_list');

      array.forEach(tag_ul_elems, function(ul_tag_elem) {
        var node_id = ul_tag_elem['id'];
        var vgid = ul_tag_elem.attributes['hollyrosa:vgid'].value;
        tags.getTags("${tg.url('/tag/get_tags')}", vgid, node_id ) ;
      });
    });

    //...adding filtering menu

    var vgtgroups = ${literal( "[" + ','.join( ['["'+a['id'] + '", "' + a['title'] +'"]' for a in visiting_group_types]   )   + "]")};
    var vgt_status = common_menu.load_ag_checkbox_status();

    array.forEach(vgtgroups, function(a) {
      common_menu.add_ag_checkbox_menu_item(view_vgt_menu, a[1], a[0], vgt_status, common_menu.update_visiting_group_type_visible_rows);
    });

    common_menu.update_visiting_group_type_visible_rows(vgt_status);
    });



  </script> <!-- END DOJO MODULE 1 -->


  <!-- DOJO MODULE 2 -->
  <script type="text/javascript">

  require(["dojo/_base/array", "dojo/dom-construct", "dojo/query!css2", "dojo/dom", "dojo/request/xhr", "dojo/on", "dojo/ready", "dojo/domReady!"], function(array, domConstruct, query, dom, xhr, on, ready) {

  // TODO: check if these functions for unbound names has any meaningfull behaviour any more -->
  function updateUnboundNames(data) {
    query('.unbound_names').forEach(domConstruct.destroy);
    var names = data['names'];
    var ul_unbound_names_list = dom.byId("unbound_names");

    for (n in names) {
      var ne = escape(n);
      domConstruct.create("li", {innerHTML: 'LT a href="view_bookings_of_name?name=' + ne + '"GT' + n +'ENDA', class:'unbound_names'}, ul_unbound_names_list);
    }
    dom.byId('tag_input').value = '';
  }

  function getUnboundNames() {
    xhr("${tg.url('/tag/get_unbound_visiting_group_names')}", {
      handleAs: "json",
      method: "GET"
    }).then(function(data){
      updateUnboundNames(data);
    });
  }

  function loadNotesFor(id) {
    xhr("${tg.url('/note/get_notes_for_visiting_group')}", {
      query: {'id': id},
      handleAs: "json",
      method: "GET"
    }).then(function(data){ updatedNotes(data); })
  }
  });
  </script> <!-- END DOJO MODULE  2 -->


</head>


<body class="tundra" py:block="body" py:strip="True">



  <div class="more_menu_symbol" style="width:20em;" id="bokn_status_menu"><h2>Viewing VODB Groups</h2></div>
  <table id="vgroup_listing">
    <tr py:for="visiting_group in visiting_groups" class="name_menu" hollyrosa:vgid="${visiting_group.id}" hollyrosa:vgtid="${visiting_group['subtype']}" hollyrosa:vgname="${visiting_group['name']}" hollyrosa:taglist_node_id="taglist_for_${hash(visiting_group.id)}" hollyrosa:has_notes="${has_notes_map.has_key(visiting_group.id)}">
      <td class="info data context_menu_symbol">${visiting_group['name']}<a name="vgroupid_${visiting_group.id}"/><br/>[${reFormatDate(visiting_group['from_date'])} to ${reFormatDate(visiting_group['to_date'])}]<br/><br/>${visiting_group.get('vodb_contact_person','')}<br/>${visiting_group.get('vodb_contact_phone','')}<br/><a href="mailto:${visiting_group.get('vodb_contact_email','')}">${visiting_group.get('vodb_contact_email','')}</a></td>
      <td class="info data">
        <div class="note context_menu_symbol"><ul class="tag_list" id="taglist_for_${hash(visiting_group.id)}" hollyrosa:vgid="$visiting_group.id"></ul>
          <p>bok.nr: <b>${visiting_group['boknr']}</b> <br/>
            vodb status: <b>${vodb_state_map.get(visiting_group.get('vodbstatus','-'), '')}</b><br/>
            program status: <b>${program_state_map.get(visiting_group['boknstatus'], '')}</b><br/>
            camping location: <b>${visiting_group['camping_location']}</b></p>${literal(visiting_group['info'])}</div>

            <div id="notes_for_${visiting_group.id}"> <span py:if="has_notes_map.has_key(visiting_group.id)" id="load_notes_for_${visiting_group.id}">has notes, load using the context menu</span></div>
        </td>
      </tr>
    </table>
</body>
</html>
