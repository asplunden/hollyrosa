<!DOCTYPE html>
<html py:extends="master.xhtml" py:strip="True">

<!--
Copyright 2010-2020 Martin Eliasson

This file is part of Hollyrosa

Hollyrosa is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Hollyrosa is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Hollyrosa.  If not, see <http://www.gnu.org/licenses/>.

-->

<head py:block="head" py:strip="True">
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" py:replace="''"/>
  <title>Hollyrosa - Viewing VODB Groups</title>
  <!-- TODO: is std.js used here ? -->
  <script type="text/javascript" src="${tg.url('/scripts/std.js')}" ></script>
<!-- BEGIN DOJO MODULE -->
  <script>
require(["common_menu", "page/vodb_group_view_all", "page/tag_and_note", "dojo/_base/array", "dijit/registry", "dojo/query!css2", "dojo/io-query", "dojo/dom-construct", "dojo/_base/window", "dojo/ready"],
  function(common_menu, page, tagAndNote, array, registry, xq, ioQuery, domConstruct, win, ready) {

  ready(function() {

    tag_and_note_config = {
      all_tags: ${literal( '[' + ''.join(['"'+l+'", ' for l in all_tags]  ) +']' )},
      view_tags_url: '${tg.url('view_tags')}',
      get_tags_url: '${tg.url('/tag/get_tags')}',

      download_attachment_url: '${tg.url('/note/download_attachment')}',
      delete_tag_url: '${tg.url('/tag/delete_tag')}',
      add_tag_url: '${tg.url('/tag/add_tags')}',
      get_notes_for_visiting_group_url: '${tg.url('/note/get_notes_for_visiting_group')}',
    }



    page_config = {
      tag_and_note_config: tag_and_note_config,
      edit_booking_url: '${tg.url('/booking/edit_booking')}',
      show_visiting_group_url: '${tg.url('show_visiting_group')}',
      show_vodb_group_url: '${tg.url('view_vodb_group')}',
      edit_visiting_group_url: '${tg.url('edit_visiting_group')}',
      edit_vodb_group_url: '${tg.url('edit_group_data')}',
      visiting_groups_view_all_url: '${tg.url('/visiting_group/view_all')}',
      vodb_groups_view_all_url: '${tg.url('/vodb_group/view_all')}',

      visiting_groups_view_today_url: '${tg.url('/visiting_group/view_today')}',
      vodb_groups_view_today_url: '${tg.url('/vodb_group/view_today')}',
      view_program_state_url: '${tg.url('view_program_state')}',
      view_vodb_state_url: '${tg.url('view_vodb_state')}',
      visiting_group_type_list: ${literal( "[" + ','.join( ['["'+a['id'] + '", "' + a['title'] +'"]' for a in visiting_group_types]   )   + "]")}, // TODO: refactor into its own module
      view_bookings_of_visiting_group_id_url: '${tg.url('view_bookings_of_visiting_group_id')}',
      visiting_group_program_request_edit_request: '${tg.url('/visiting_group_program_request/edit_request')}',

      add_note_url: '${tg.url('/note/add_note')}',
      add_attachment_url: '${tg.url('/note/add_attachment')}',
      layers_printable_url: '${tg.url('/program_layer/layers_printable')}',
      layers_url: '${tg.url('/program_layer/layers')}',
      edit_layers_url: '${tg.url('/program_layer/edit_layers')}',
      show_history_url: '${tg.url('/history/show')}',
      program_state_map: ${literal( '['+ ','.join( ['["'+str(k)+'","'+v+'"]'  for k,v in program_state_map.items()] ) +']' )}, // TODO: load via AJAX, wont change betweeen logins
      vodb_state_map: ${literal( '['+ ','.join( ['["'+str(k)+'","'+v+'"]'  for k,v in vodb_state_map.items()] ) +']' )}, // TODO: load via AJAX, wont change betweeen logins

      edit_vodb_group_sheet_url: '${tg.url('edit_group_sheet')}',
      new_vodb_group_visiting_group_url: '${tg.url('/vodb_group/edit_group_data', params={'subtype':'program'})}',
      new_vodb_group_staff_url: '${tg.url('/vodb_group/edit_group_data', params={'subtype':'staff'})}',
      new_vodb_group_course_url: '${tg.url('/vodb_group/edit_group_data', params={'subtype':'course'})}'
    }


    page.setup(page_config);
    tagAndNote.setup(page_config.tag_and_note_config);

    });
});


  </script> <!-- END DOJO MODULE 1 -->


  <!-- DOJO MODULE 2 -->
  <script type="text/javascript">

require(["dojo/_base/array", "dojo/dom-construct", "dojo/query!css2", "dojo/dom", "dojo/request/xhr", "dojo/on", "dojo/ready"], function(array, domConstruct, query, dom, xhr, on, ready) {

  // TODO: check if these functions for unbound names has any meaningfull behaviour any more -->
  function updateUnboundNames(data) {
    query('.unbound_names').forEach(domConstruct.destroy);
    var names = data['names'];
    var ul_unbound_names_list = dom.byId("unbound_names");

    for (n in names) {
      var ne = escape(n);
      domConstruct.create("li", {innerHTML: 'LT a href="view_bookings_of_name?name=' + ne + '"GT' + n +'ENDA', class:'unbound_names'}, ul_unbound_names_list);
    }
    dom.byId('tag_input').value = '';
  }

  function getUnboundNames() {
    xhr("${tg.url('/tag/get_unbound_visiting_group_names')}", {
      handleAs: "json",
      method: "GET"
    }).then(function(data){
      updateUnboundNames(data);
    });
  }

  function loadNotesFor(id) {
    xhr("${tg.url('/note/get_notes_for_visiting_group')}", {
      query: {'id': id},
      handleAs: "json",
      method: "GET"
    }).then(function(data){ updatedNotes(data); })
  }
  });
  </script> <!-- END DOJO MODULE  2 -->


</head>


<body class="tundra" py:block="body" py:strip="True">
  <section class="section">
    <div class="container is-fluid">
      <div class="more_menu_symbol" id="bokn_status_menu"><h2 class="title">Viewing VODB Groups</h2></div>
      <table id="vgroup_listing">
        <tr py:for="visiting_group in visiting_groups" class="name_menu" hollyrosa:vgid="${visiting_group.id}" hollyrosa:vgtid="${visiting_group['subtype']}" hollyrosa:vgname="${visiting_group['name']}" hollyrosa:taglist_node_id="taglist_for_${hash(visiting_group.id)}" hollyrosa:has_notes="${has_notes_map.has_key(visiting_group.id)}">
          <td class="info data context_menu_symbol">${visiting_group['name']}<a name="vgroupid_${visiting_group.id}"/><br/>[${reFormatDate(visiting_group['from_date'])} to ${reFormatDate(visiting_group['to_date'])}]<br/><br/>${visiting_group.get('vodb_contact_person','')}<br/>${visiting_group.get('vodb_contact_phone','')}<br/><a href="mailto:${visiting_group.get('vodb_contact_email','')}">${visiting_group.get('vodb_contact_email','')}</a></td>
          <td class="info data">
            <div class="note context_menu_symbol"><span class="tags" id="taglist_for_${hash(visiting_group.id)}" hollyrosa:vgid="$visiting_group.id"></span>
              <p>bok.nr: <b>${visiting_group['boknr']}</b> <br/>
                vodb status: <b>${vodb_state_map.get(visiting_group.get('vodbstatus','-'), '')}</b><br/>
                program status: <b>${program_state_map.get(visiting_group['boknstatus'], '')}</b><br/>
                camping location: <b>${visiting_group['camping_location']}</b></p>${literal(visiting_group['info'])}</div>

                <div id="notes_for_${visiting_group.id}"> <span py:if="has_notes_map.has_key(visiting_group.id)" id="load_notes_for_${visiting_group.id}">has notes, load using the context menu</span></div>
              </td>
            </tr>
          </table>
        </div>
      </section>
    </body>
</html>
