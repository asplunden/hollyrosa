<html py:extends="master.xhtml" py:strip="True">

<!--
Copyright 2010-2017 Martin Eliasson

This file is part of Hollyrosa

Hollyrosa is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Hollyrosa is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Hollyrosa.  If not, see <http://www.gnu.org/licenses/>.

-->

<head py:block="head" py:strip="True">
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" py:replace="''"/>
  <title>Hollyrosa - Show Visiting Group ${visiting_group['name']}</title>
  <script type="text/javascript" src="${tg.url('/scripts/std.js')}" ></script>
<!-- BEGIN DOJO MODULE -->
  <script>

require(["dojo/ready", "tags", "common_menu", "dijit/Menu", "dijit/PopupMenuItem", "dojo/dom", "dojo/dom-style", "dojo/_base/array", "dojo/query!css2", "dojo/on", "dojo/_base/window", "dojo/domReady!"], function(ready, tags, common_menu, Menu, PopupMenuItem, dom, domStyle, array, query, on, win) {

  function deleteTagHelper(evt) {
    //var tag_elem = evt.srcElement.parentElement;
    //var inner_text = tag_elem.innerText;
    var tag_elem = evt.target.parentElement;
    var inner_text = tag_elem.textContent;
    inner_text = inner_text.replace(' (X)','');
    tags.deleteTag("${tg.url('/tag/delete_tag')}", "${visiting_group['_id']}", 'taglist',inner_text);
  }


  var tag_dialog = tags.createAddTagDialog( '${tg.url('/tag/add_tags')}', tags.updateTagsCloseDialog );


  function show_add_tag_dialog_ng() {
    tags.showAddTagDialog(tag_dialog, '${visiting_group['_id']}', 'taglist');
  }

  function startup() {
    //...setup main menu for visiting group
    var use_left_click_menu = common_menu.load_left_click_menu();
    var change_program_status_menu = new Menu();

    var menu = new Menu({
      targetNodeIds: ["visiting_group_menu", "note"],
      leftClickToOpen: use_left_click_menu
    });


    //...load all tags for visiting group
    tags.getTags("${tg.url('/tag/get_tags')}", "${visiting_group['_id']}", 'taglist');


    common_menu.add_vgid_redirect_menu_item(menu, menu, "New booking request...", '${visiting_group['_id']}', '${tg.url('/booking/edit_booking')}');
    common_menu.add_menu_separator(menu);
    common_menu.add_vgid_redirect_menu_item(menu, menu, "Edit...", '${visiting_group['_id']}', '${tg.url('edit_visiting_group')}');
    common_menu.add_call_function_menu_item(menu, menu, "Add tags...",  show_add_tag_dialog_ng  );
    common_menu.add_note_redirect_menu_item(menu, menu, "Add note...", '${visiting_group['_id']}', '${tg.url('/note/add_note')}');
    common_menu.add_note_redirect_menu_item(menu, menu, "Add attachment...", '${visiting_group['_id']}', '${tg.url('/note/add_attachment')}');
    common_menu.add_menu_separator(menu);
    common_menu.add_visiting_group_menu_item(menu, menu, "List bookings of group...", '${tg.url('/visiting_group/view_bookings_of_visiting_group_id')}');


    var program_layers_menu = new Menu();
    menu.addChild(new PopupMenuItem({
      label: "Program Layers ->",
      popup: program_layers_menu,
      leftClickToOpen: common_menu.load_left_click_menu()
    }));

    common_menu.add_visiting_group_menu_item(menu, program_layers_menu, "Printable ...", '${tg.url('/program_layer/layers_printable')}');
    common_menu.add_visiting_group_menu_item(menu, program_layers_menu, "Live Calendar...", '${tg.url('/program_layer/layers')}');
    common_menu.add_visiting_group_menu_item(menu, program_layers_menu, "Edit Connected Layers...", '${tg.url('/program_layer/edit_layers')}');
    common_menu.add_menu_separator(menu);
    common_menu.add_vgid_redirect_menu_item(menu, menu, "Copy vodb contact info", '${visiting_group['_id']}', '${tg.url('copy_vodb_contact_info')}');
    common_menu.add_visiting_group_menu_item(menu, menu, "Ext. Booking Request", '${tg.url('/visiting_group_program_request/edit_request')}');


    //...attach the add tag handler
    //var the_add_tag_href_elem = dom.byId('add_tag_href2');
    //on(the_add_tag_href_elem, 'click', addTagHelper);

    //...link delete tag handler to any element with class .tag in document.
    on(win.doc, '.tag:click', deleteTagHelper);


    //...create menu for add/edit/show/delete note
    var note_menu = new Menu({
      targetNodeIds: ["content"],
      selector: "div.note2",
      leftClickToOpen: common_menu.load_left_click_menu()
    });

    common_menu.add_note_redirect_menu_item(note_menu, note_menu, "Add note...", '${visiting_group['_id']}', '${tg.url('/note/add_note')}');
    common_menu.add_note_redirect_menu_item(note_menu, note_menu, "Add attachment...", '${visiting_group['_id']}', '${tg.url('/note/add_attachment')}');
    common_menu.add_visiting_group_edit_note_menu_item(note_menu, note_menu, "Edit note...",  '${tg.url('/note/edit_note')}');
    common_menu.add_visiting_group_edit_note_menu_item(note_menu, note_menu, "Delete note...", '${tg.url('/note/delete_note')}');


    //...create menu for add/edit/show/delete note
    var attachment_menu = new Menu({
      targetNodeIds: ["content"],
      selector: "div.attachment2",
      leftClickToOpen: common_menu.load_left_click_menu()
    });

    common_menu.add_note_redirect_menu_item(attachment_menu, attachment_menu, "Add note...", '${visiting_group['_id']}', '${tg.url('/note/add_note')}');
    common_menu.add_note_redirect_menu_item(attachment_menu, attachment_menu, "Add attachment...", '${visiting_group['_id']}', '${tg.url('/note/add_attachment')}');
    common_menu.add_visiting_group_edit_note_menu_item(attachment_menu, attachment_menu, "Edit attachment...",  '${tg.url('/note/edit_attachment')}');
    common_menu.add_visiting_group_edit_note_menu_item(attachment_menu, attachment_menu, "Delete attachment...", '${tg.url('/note/delete_note')}');

    /**** assembling change program state and vodb state menus ***/
    common_menu.add_menu_separator(menu);
    var change_program_status_menu = new Menu();
    menu.addChild(new PopupMenuItem({
      label: "Change program status ->",
      popup: change_program_status_menu,
      leftClickToOpen: common_menu.load_left_click_menu()
    }));

    var set_program_state_url = '${tg.url('/visiting_group/set_program_state')}';

    array.forEach(common_menu.program_state_change_list, function(x) {common_menu.add_change_program_state_menu_item(menu, change_program_status_menu, x['name'], x['state'], 0, set_program_state_url);});
    /* Disabled so we dont do misstakes *
    var change_vodb_status_menu = new Menu();
    menu.addChild(new PopupMenuItem({
    label: "Change vodb status",
    popup: change_vodb_status_menu,
    leftClickToOpen: common_menu.load_left_click_menu()
  }));

  var set_vodb_state_url = '${tg.url('/visiting_group/set_vodb_state')}';

  array.forEach(common_menu.vodb_state_change_list, function(x) {console.log(x); common_menu.add_change_program_state_menu_item(menu, change_vodb_status_menu, x['name'], x['state'], 0, set_vodb_state_url);});
  */

    common_menu.add_menu_separator(menu);
    common_menu.add_vgid_redirect_menu_item(menu, menu, "Show history...", '${visiting_group['_id']}', '${tg.url('/history/show')}');
    common_menu.add_vgid_redirect_menu_item(menu, menu, "Edit vodb data...", '${visiting_group['_id']}', '${tg.url('/vodb_group/edit_data', params={'vgroup_id':visiting_group['_id']})}');

  };


  ready(function() {
    startup();
  });
});
  </script>
</head>
  <body class="tundra" py:block="body" py:strip="True">
    <section class="section">
      <div class="container">
        <div id="visiting_group_menu" class="more_menu_symbol" hollyrosa:vgid="${visiting_group['_id']}"><h2 class="title">${visiting_group['name']}</h2></div>
        <p class="context_menu_symbol">${reFormatDate(visiting_group['from_date'])} to ${reFormatDate(visiting_group['to_date'])}</p>

        <div class="note context_menu_symbol" id="note" hollyrosa:vgid="${visiting_group['_id']}"><div class="tag_list"><span style="display:inline;" id="taglist" class="tags"></span></div>
        <table class="visiting_group_info_table">
          <tr><td class="legend">bok.nr:</td><td class="info">${visiting_group['boknr']}</td></tr>
          <tr><td class="legend">subtype:</td><td class="info">${visiting_group.get('subtype','')}</td></tr>
          <tr><td class="legend">password:</td><td class="info">${visiting_group.get('password','')}</td></tr>

          <tr><td class="legend">vodb status:</td><td class="info">${vodb_state_map.get(visiting_group.get('vodbstatus','-'))}</td></tr>
          <tr><td class="legend">program status:</td><td class="info">${program_state_map.get(visiting_group['boknstatus'],'')}</td></tr>
          <tr><td class="legend">camping location:</td><td class="info">${visiting_group['camping_location']}</td></tr>
        </table>
        <p>${literal(visiting_group['info'])}</p>
      </div>
    </div>
  </section>
  <section class="section">
    <div class="container" id="content">
      <h3 class="subtitle">Notes and attachments</h3>
      <article py:for="n in notes" class="media">
        <div class="media-content">
          <div class="${n['type']}2 context_menu_symbol" hollyrosa:nid="${n['_id']}" hollyrosa:vgid="${visiting_group['_id']}"><i><strong>${n['timestamp']}</strong> ${n['type']} by ${n['last_changed_by']}</i><br/><br/>
            <div py:if="'note' == n['type']">${literal(n['text'])}</div>
            <div py:if="('attachment' == n['type'])">${n['text']}<br/><br/>

              <div py:for="aname, atinfo in n.get('_attachments',{}).items()"><strong>${aname}</strong><br/><a href="${tg.url('/note/download_attachment', params={'attachment_id':n['_id'],'doc_id':aname})}" class="button is-primary is-outlined is-small">Download ${atinfo['content_type']} ${atinfo['length']}</a></div>
            </div>
        </div>
      </div>
      </article>
    </div>
  </section>
  <section class="section">
    <div class="container">
      <div class="content">

        <div class="card">
          <div class="card-content">
            <div class="media-content">
              <h3 class="subtitle">Contact Info</h3>
                <p>${visiting_group.get('contact_person','')}<br/>${visiting_group.get('contact_person_phone','')}<br/><a href="mailto:${visiting_group.get('contact_person_email','')}">${visiting_group.get('contact_person_email','')}</a><br/>
                </p>
            </div>
          </div>
        </div>
    </div>

      <h3 class="title">Message to program from ext booking</h3>
      <div class="note">
        <p>${literal(visiting_group.get('program_request_info',''))}</p></div>
        <h3 class="subtitle">Properties</h3>
        <table class="data">
          <tr>
            <th>Property = Value Unit</th><th>Description</th><th>From date</th><th>To date</th>
          </tr>
          <tr py:for="prop in visiting_group['visiting_group_properties'].values()">

            <td class="info">${'$'+prop['property']} = ${prop['value']} ${prop['unit']}</td><td class="info">${prop['description']}</td><td class="info">${prop['from_date']}</td><td class="info">${prop['to_date']}</td>
          </tr>
        </table>
      </div>
    </section>
  </body>
</html>
