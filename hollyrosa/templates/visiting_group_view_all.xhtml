<!DOCTYPE html>
<html py:extends="master.xhtml" py:strip="True">

<!--
Copyright 2010-2018 Martin Eliasson

This file is part of Hollyrosa

Hollyrosa is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Hollyrosa is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Hollyrosa.  If not, see <http://www.gnu.org/licenses/>.

-->

<head py:block="head" py:strip="True">
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" py:replace="''"/>
  <title>Hollyrosa - Viewing Visiting Groups</title>

  <script type="text/javascript" src="${tg.url('/scripts/std.js')}" ></script>
<!-- BEGIN DOJO MODULE -->
  <script>
require(["common_menu", "page/visiting_group_view_all", "page/tag_and_note", "dojo/_base/array", "dijit/registry", "dojo/query!css2", "dojo/io-query", "dojo/dom-construct", "dojo/_base/window", "dojo/ready"],
  function(common_menu, page, tagAndNote, array, registry, xq, ioQuery, domConstruct, win, ready) {

  ready(function() {

    tag_and_note_config = {
      all_tags: ${literal( '[' + ''.join(['"'+l+'", ' for l in all_tags]  ) +']' )},
      view_tags_url: '${tg.url('view_tags')}',
      get_tags_url: '${tg.url('/tag/get_tags')}',

      download_attachment_url: '${tg.url('/note/download_attachment')}',
      delete_tag_url: '${tg.url('/tag/delete_tag')}',
      add_tag_url: '${tg.url('/tag/add_tags')}',
      get_notes_for_visiting_group_url: '${tg.url('/note/get_notes_for_visiting_group')}',
    }


    page_config = {
      tag_and_note_config: tag_and_note_config,
      edit_booking_url: '${tg.url('/booking/edit_booking')}',
      show_visiting_group_url: '${tg.url('show_visiting_group')}',
      edit_visiting_group_url: '${tg.url('edit_visiting_group')}',
      add_note_url: '${tg.url('/note/add_note')}',
      add_attachment_url: '${tg.url('/note/add_attachment')}',
      view_bookings_of_visiting_group_id_url: '${tg.url('view_bookings_of_visiting_group_id')}',
      layers_printable_url: '${tg.url('/program_layer/layers_printable')}',
      layers_url: '${tg.url('/program_layer/layers')}',
      edit_layers_url: '${tg.url('/program_layer/edit_layers')}',
      visiting_group_program_request_edit_request: '${tg.url('/visiting_group_program_request/edit_request')}',
      show_history_url: '${tg.url('/history/show')}',
      visiting_groups_view_all_url: '${tg.url('/visiting_group/view_all')}',
      visiting_groups_view_today_url: '${tg.url('/visiting_group/view_today')}',
      program_state_map: ${literal( '['+ ','.join( ['["'+str(k)+'","'+v+'"]'  for k,v in program_state_map.items()] ) +']' )}, // TODO: load via AJAX, wont change betweeen logins
      vodb_state_map: ${literal( '['+ ','.join( ['["'+str(k)+'","'+v+'"]'  for k,v in vodb_state_map.items()] ) +']' )}, // TODO: load via AJAX, wont change betweeen logins
      view_program_state_url: '${tg.url('view_program_state')}',
      view_vodb_state_url: '${tg.url('view_vodb_state')}',
      visiting_group_type_list: ${literal( "[" + ','.join( ['["'+a['id'] + '", "' + a['title'] +'"]' for a in visiting_group_types]   )   + "]")} // TODO: refactor into its own module
    }

    page.setup(page_config);
    tagAndNote.setup(page_config.tag_and_note_config);
  });
});

  </script> <!-- END DOJO MODULE -->
  <!-- BEGIN DOJO MODULE 2 -->
  <script type="text/javascript">

require(["dojo/_base/array", "dojo/dom-construct", "dojo/query!css2", "dojo/dom", "dojo/request/xhr", "dojo/on", "dojo/ready"], function(array, domConstruct, query, dom, xhr, on, ready) {

  function updateUnboundNames(data) {
    query('.unbound_names').forEach(domConstruct.destroy);
    var names = data['names'];
    var ul_unbound_names_list = dom.byId("unbound_names");

    for (n in names) {
      var ne = escape(n);
      domConstruct.create("li", {innerHTML: 'LT a href="view_bookings_of_name?name=' + ne + '"GT' + n +'ENDA', class:'unbound_names'}, ul_unbound_names_list);
    }
    dom.byId('tag_input').value = '';
  }

  function getUnboundNames() {
    xhr("${tg.url('/tag/get_unbound_visiting_group_names')}", {
      handleAs: "json",
      method: "GET"}).then(function(data){updateUnboundNames(data);});
    }
/*
    function loadNotesFor(id) {
      xhr("${tg.url('/note/get_notes_for_visiting_group')}", {
        query: {'id': id},
        handleAs: "json",
        method: "GET"}).then(function(data){ updatedNotes(data); })
      }
*/
    });
  </script>
</head>
<body class="tundra" py:block="body" py:strip="True">
  <section class="section">
    <div class="container is-fluid">
      <div class="more_menu_symbol" id="bokn_status_menu"><h2 class="title">Viewing visiting groups</h2></div>
      <div class="tile is-ancestor">
        <div class="tile is-vertical is-3"> <!-- this is the sidebar menu -->
          <div class="tile is-parent">
            <div class="tile is-child">
              <nav class="panel">
                <p class="panel-heading">
                  Quick Navigation
                </p>

                <div class="panel-block">
                  <a class="button is-outlined is-fullwidth" href="${tg.url('/visiting_group/view_today')}">
                    Today
                  </a>
                  <a class="button is-outlined is-fullwidth" href="${tg.url('/visiting_group/view_all')}">
                    All Days
                  </a>

                </div>

                <p class="panel-heading">
                  View Program Status
                </p>
                <a py:attrs="{'class': {False:'panel-block', True:'panel-block is-active'}[tg.request.params.get('program_state', '') == str(k)]}" py:for="k,v in program_state_map.items()" href="${tg.url('/visiting_group/view_program_state', params={'program_state':k})}">
                  ${v}
                </a>

                <p class="panel-heading">
                  View Tag
                </p>

                <a py:attrs="{'class': {False:'panel-block', True:'panel-block is-active'}[tg.request.params.get('tag', '') == tag]}" py:for="tag in all_tags" href="${tg.url('/visiting_group/view_tags', params={'tag':tag})}">
                  <span class="">${tag}</span>

                </a>
                <!--
                <p class="panel-heading">
                  VODB Status
                </p>
                <a class="panel-block" py:for="k,v in vodb_state_map.items()" href="${tg.url('/visiting_group/view_vodb_state', params={'program_state':k})}">
                  ${v}
                </a>
              -->
              <!--
                <p class="panel-heading">
                  Filter
                </p>
                <label class="panel-block" py:for="m in visiting_group_types">
                  <input type="checkbox"/>
                    ${m['title']}
                </label> -->
              </nav>
            </div>
          </div>
        </div>
        <div class="tile is-vertical" id="vgroup_listing"> <!-- this is the sidebar menu -->

          <!-- Within the vertical section for visiting groups, we also need [ [] []  ] organization -->
          <div class="tile name_menu" py:for="visiting_group in visiting_groups"
            hollyrosa:vgid="${visiting_group.id}"
            hollyrosa:taglist_node_id="taglist_for_${hash(visiting_group.id)}"
            hollyrosa:vgname="${visiting_group['name']}"
            hollyrosa:vgtid="${visiting_group['subtype']}"
            hollyrosa:has_notes="${has_notes_map.has_key(visiting_group.id)}"> <!-- outer container for each group -->

            <div class="tile">


            <div class="tile is-parent is-4"> <!-- tile for left info -->
              <div class="tile is-child context_menu_symbol">
                <a name="vgroupid_${visiting_group.id}"/>
                <h2 class="subtitle is-5">${visiting_group['name']}</h2>
                <p class="">${reFormatDate(visiting_group['from_date'])} to ${reFormatDate(visiting_group['to_date'])}</p>

                <address>
                  ${visiting_group.get('contact_person','')}<br/>${visiting_group.get('contact_person_phone','')}<br/><a href="mailto:${visiting_group.get('contact_person_email','')}">${visiting_group.get('contact_person_email','')}</a>
                </address>
              </div>
            </div>

            <div class="tile is-parent"> <!-- tile for right info -->
              <div class="tile is-child context_menu_symbol">

                <div class="note notification context_menu_symbol"><span class="tags" id="taglist_for_${hash(visiting_group.id)}" hollyrosa:vgid="$visiting_group.id"></span>
                  <p>bok.nr: <b>${visiting_group['boknr']}</b> <br/>
                    vodb status: <b>${vodb_state_map.get(visiting_group.get('vodbstatus','-'), '')}</b><br/>
                    program status: <b>${program_state_map.get(visiting_group['boknstatus'], '')}</b><br/>
                    camping location: <b>${visiting_group['camping_location']}</b></p>${literal(visiting_group['info'])}
                </div>

                <article id="notes_for_${visiting_group.id}">
                  <!-- <a py:if="has_notes_map.has_key(visiting_group.id)" id="load_notes_for_${visiting_group.id}" hollyrosa:loadnotes="${visiting_group.id -->
                  <span py:if="has_notes_map.has_key(visiting_group.id)" id="load_notes_for_${visiting_group.id}">has notes, load using the context menu</span>
                </article>
              </div>
            </div>
          </div>
          <hr class="is-flex-touch"/>
        </div>
      </div>
      </div>
            <!--
            <h2>Visiting group names used that not is in any registered group</h2>
            <p><a class="unbound_names" href="javascript:getUnboundNames();">load unbound names</a></p>
            <ul id="unbound_names">
            <li py:for="v in remaining_visiting_group_names">"${v}" <a href="${tg.url('view_bookings_of_name', params={'name':v})};">List all activities</a></li>
          </ul> -->
        </div>
      </section>
    </body>
</html>
